// :RUN_RFXC -P %STD_OUTPUT% %INPUT%

// Test support for `#pragma once`

// We will include two header files:
// one that uses `#pragma once`, and
// one that doesn't.
//
// The first file defines a function `foo()`,
// and the second defines a macro `BAR`
#include "PragmaOnce-a.hrfx"
#include "PragmaOnce-b.hrfx"

// We will include the files again, and
// before we do so we need to undefine
// the macro from the second file so
// that it doesn't get a redefinition diagnostic.
#undef BAR
//
// We don't do anything about the function
// in the first file, because we expect
// the `#pragma once` to cause it to be
// ignored on this second time.
#include "PragmaOnce-a.hrfx"
#include "PragmaOnce-b.hrfx"

// Make sure relative paths are handled
#include "./PragmaOnce-a.hrfx"
#include "./PragmaOnce-a.hrfx"

#include ".\PragmaOnce-a.hrfx"
#include "./include\../PragmaOnce-a.hrfx"

#include "../preprocessor/./PragmaOnce-a.hrfx"

#include "include/PragmaOnce-c.hrfx"
#include "./include\PragmaOnce-c.hrfx"

#ifndef ONLY_DEFINED_ONCE_C
#undef BAR
#endif

// Now let's use both the function and the
// macro, to confirm that they are both
// defined as expected.
//
// Note: if we accidentally include file
// `a.h` more than once, we'd expect to
// get an error here, because the two
// function definitions conflict.
float test(float x)
{
	return foo(x) + BAR(x);
}
