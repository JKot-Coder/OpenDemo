LexerOutput:[
	{"Type":"line comment", "Content":"\/\/LEXER_TEST:", "Line":1, "Column":1},
	{"Type":"end of line", "Content":"\r\n", "Line":1, "Column":14},
	{"Type":"end of line", "Content":"\r\n", "Line":2, "Column":1},
	{"Type":"integer literal", "Content":"1234567890", "Line":3, "Column":1},
	{"Type":"whitespace", "Content":"   ", "Line":3, "Column":11},
	{"Type":"line comment", "Content":"\/\/ Basic integer", "Line":3, "Column":14},
	{"Type":"end of line", "Content":"\r\n", "Line":3, "Column":30},
	{"Type":"integer literal", "Content":"0123456789", "Line":4, "Column":1},
	{"Type":"whitespace", "Content":"\t ", "Line":4, "Column":11},
	{"Type":"line comment", "Content":"\/\/ Octal with invalid digits", "Line":4, "Column":16},
	{"Type":"end of line", "Content":"\r\n", "Line":4, "Column":44},
	{"Type":"integer literal", "Content":"0B0101010101", "Line":5, "Column":1},
	{"Type":"whitespace", "Content":" ", "Line":5, "Column":13},
	{"Type":"line comment", "Content":"\/\/ Basic binary", "Line":5, "Column":14},
	{"Type":"end of line", "Content":"\r\n", "Line":5, "Column":29},
	{"Type":"integer literal", "Content":"0b0123456789", "Line":6, "Column":1},
	{"Type":"whitespace", "Content":" ", "Line":6, "Column":13},
	{"Type":"line comment", "Content":"\/\/ Binary with invalid digits", "Line":6, "Column":14},
	{"Type":"end of line", "Content":"\r\n", "Line":6, "Column":43},
	{"Type":"integer literal", "Content":"0XDEADBEEF", "Line":7, "Column":1},
	{"Type":"whitespace", "Content":"   ", "Line":7, "Column":11},
	{"Type":"line comment", "Content":"\/\/ HEX", "Line":7, "Column":14},
	{"Type":"end of line", "Content":"\r\n", "Line":7, "Column":20},
	{"Type":"integer literal", "Content":"0xQWE", "Line":8, "Column":1},
	{"Type":"whitespace", "Content":"\t     ", "Line":8, "Column":6},
	{"Type":"line comment", "Content":"\/\/ Invalid hex", "Line":8, "Column":15},
	{"Type":"end of line", "Content":"\r\n", "Line":8, "Column":29},
	{"Type":"end of line", "Content":"\r\n", "Line":9, "Column":1},
	{"Type":"floating-point literal", "Content":"0.123456789", "Line":10, "Column":1},
	{"Type":"whitespace", "Content":"  ", "Line":10, "Column":12},
	{"Type":"line comment", "Content":"\/\/ Basic Float", "Line":10, "Column":14},
	{"Type":"end of line", "Content":"\r\n", "Line":10, "Column":28},
	{"Type":"end of line", "Content":"\r\n", "Line":11, "Column":1},
	{"Type":"line comment", "Content":"\/\/ Suffixes", "Line":12, "Column":1},
	{"Type":"end of line", "Content":"\r\n", "Line":12, "Column":12},
	{"Type":"floating-point literal", "Content":"0.1234580AnySuffixSymbols", "Line":13, "Column":1},
	{"Type":"end of line", "Content":"\r\n", "Line":13, "Column":26},
	{"Type":"integer literal", "Content":"1234suffix", "Line":14, "Column":1},
	{"Type":"end of file", "Content":"", "Line":14, "Column":11},
]
Diagnostic:[
	..\src\rfx\tests\lexer\Numbers.rfx(4): warning 10002: '0' prefix indicates octal literal
	0123456789     // Octal with invalid digits
	^
	..\src\rfx\tests\lexer\Numbers.rfx(4): error 10003: invalid digit for base-8 literal: '8'
	0123456789     // Octal with invalid digits
	        ^
	..\src\rfx\tests\lexer\Numbers.rfx(4): error 10003: invalid digit for base-8 literal: '9'
	0123456789     // Octal with invalid digits
	         ^
	..\src\rfx\tests\lexer\Numbers.rfx(6): error 10003: invalid digit for base-2 literal: '2'
	0b0123456789 // Binary with invalid digits
	    ^
	..\src\rfx\tests\lexer\Numbers.rfx(6): error 10003: invalid digit for base-2 literal: '3'
	0b0123456789 // Binary with invalid digits
	     ^
	..\src\rfx\tests\lexer\Numbers.rfx(6): error 10003: invalid digit for base-2 literal: '4'
	0b0123456789 // Binary with invalid digits
	      ^
	..\src\rfx\tests\lexer\Numbers.rfx(6): error 10003: invalid digit for base-2 literal: '5'
	0b0123456789 // Binary with invalid digits
	       ^
	..\src\rfx\tests\lexer\Numbers.rfx(6): error 10003: invalid digit for base-2 literal: '6'
	0b0123456789 // Binary with invalid digits
	        ^
	..\src\rfx\tests\lexer\Numbers.rfx(6): error 10003: invalid digit for base-2 literal: '7'
	0b0123456789 // Binary with invalid digits
	         ^
	..\src\rfx\tests\lexer\Numbers.rfx(6): error 10003: invalid digit for base-2 literal: '8'
	0b0123456789 // Binary with invalid digits
	          ^
	..\src\rfx\tests\lexer\Numbers.rfx(6): error 10003: invalid digit for base-2 literal: '9'
	0b0123456789 // Binary with invalid digits
	           ^
]
